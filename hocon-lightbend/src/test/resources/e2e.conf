# ===========================================
#   Okaeri Configs - Mega Test Config
#   Tests ALL features comprehensively
# ===========================================
# Boolean primitive and wrapper
primBool=true
wrapBool=false
# Numeric primitives
primByte=127
primShort=32000
primInt=2147483647
primLong=9223372036854775807
primFloat=3.141590118408203
primDouble=2.718281828
primChar=Œ©
# Wrapper types
wrapByte=100
wrapShort=30000
wrapInt=123456
wrapLong=987654321
wrapFloat=1.4140000343322754
wrapDouble=1.732
wrapChar="‚Ç¨"
# String tests
# including unicode and special chars
simpleString="Hello, World!"
unicodeJapanese="„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå üåç"
unicodeRussian="–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"
unicodePolish="Czƒô≈õƒá ≈õwiecie! ≈Å√≥d≈∫, Gda≈Ñsk, Krak√≥w, ≈∫d≈∫b≈Ço"
specialChars="!@#$%^&*()_+-=[]{}|;':\"<>?,./"
emptyString=""
# Long string without spaces (tests line wrapping)
longStringNoSpaces=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
# Long string with spaces (tests folding behavior)
longStringWithSpaces="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
# Multiline string (tests literal/folded style)
multilineString="Line 1\nLine 2\nLine 3\nLine 4 with more text\nLine 5 final"
# Math types for precision
bigInt="999999999999999999999999999999"
bigDec="123.456789012345678901234567890"
# List of strings
stringList=[
    alpha,
    beta,
    gamma
]
# List of integers
intList=[
    1,
    2,
    3,
    5,
    8,
    13
]
# Set of strings (order preserved)
stringSet=[
    one,
    two,
    three
]
# Set of enums
enumSet=[
    FIRST,
    SECOND
]
# Nested collection - list of lists
nestedListOfLists=[
    [
        a,
        b
    ],
    [
        c,
        d,
        e
    ]
]
# Simple string-to-string map
simpleMap {
    key1=value1
    key2=value2
}
# Map with integer keys
intKeyMap {
    "1"=one
    "2"=two
}
# Nested map
nestedMap {
    group1 {
        a=1
        b=2
    }
}
# Map with enum keys
enumKeyMap {
    FIRST="first value"
    SECOND="second value"
}
# Map with enum values
enumValueMap {
    a=FIRST
    b=THIRD
}
# Simple enum
singleEnum=THIRD
# List of enums
enumList=[
    FIRST,
    THIRD
]
# Nested subconfig
subConfig {
    subField="default sub"
    subNumber=42
}
# List of nested configs
subConfigList=[
    {
        subField=sub1
        subNumber=10
    },
    {
        subField=sub2
        subNumber=20
    }
]
# Complex multi-level subconfig
# MegaConfig nested inside itself (2 levels deep)
# Note: Set to null by default to avoid infinite recursion
# Call populateNestedMegaConfig() after construction to initialize
nestedMegaConfig {
    bigDec="123.456789012345678901234567890"
    bigInt="999999999999999999999999999999"
    custom-key-field="custom value"
    customObj {
        id=999
        name=test
    }
    emptyList=[]
    emptyMap {}
    emptyString=""
    enumKeyMap {
        FIRST="first value"
        SECOND="second value"
    }
    enumList=[
        FIRST,
        THIRD
    ]
    enumSet=[
        FIRST,
        SECOND
    ]
    enumValueMap {
        a=FIRST
        b=THIRD
    }
    intKeyMap {
        "1"=one
        "2"=two
    }
    intList=[
        1,
        2,
        3,
        5,
        8,
        13
    ]
    longStringNoSpaces=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    longStringWithSpaces="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
    multilineString="Line 1\nLine 2\nLine 3\nLine 4 with more text\nLine 5 final"
    nestedListOfLists=[
        [
            a,
            b
        ],
        [
            c,
            d,
            e
        ]
    ]
    nestedMap {
        group1 {
            a=1
            b=2
        }
    }
    nestedMegaConfig=null
    "nullValue"=null
    primBool=true
    primByte=127
    primChar=Œ©
    primDouble=2.718281828
    primFloat=3.141590118408203
    primInt=2147483647
    primLong=9223372036854775807
    primShort=32000
    repeatingCommentField="test value"
    serializableList=[
        {
            id=1
            name=item1
        },
        {
            id=2
            name=item2
        },
        {
            id=3
            name=item3
        }
    ]
    serializableMap {
        obj1 {
            id=100
            name=first
        }
        obj2 {
            id=200
            name=second
        }
    }
    simpleMap {
        key1=value1
        key2=value2
    }
    simpleString="Hello, World!"
    singleEnum=THIRD
    specialChars="!@#$%^&*()_+-=[]{}|;':\"<>?,./"
    stringList=[
        alpha,
        beta,
        gamma
    ]
    stringSet=[
        one,
        two,
        three
    ]
    subConfig {
        subField="default sub"
        subNumber=42
    }
    subConfigList=[
        {
            subField=sub1
            subNumber=10
        },
        {
            subField=sub2
            subNumber=20
        }
    ]
    unicodeJapanese="„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå üåç"
    unicodePolish="Czƒô≈õƒá ≈õwiecie! ≈Å√≥d≈∫, Gda≈Ñsk, Krak√≥w, ≈∫d≈∫b≈Ço"
    unicodeRussian="–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"
    variableField=default
    wrapBool=false
    wrapByte=100
    wrapChar="‚Ç¨"
    wrapDouble=1.732
    wrapFloat=1.4140000343322754
    wrapInt=123456
    wrapLong=987654321
    wrapShort=30000
}
# Serializable custom object
customObj {
    id=999
    name=test
}
# List of serializable objects
serializableList=[
    {
        id=1
        name=item1
    },
    {
        id=2
        name=item2
    },
    {
        id=3
        name=item3
    }
]
# Map of serializable objects
serializableMap {
    obj1 {
        id=100
        name=first
    }
    obj2 {
        id=200
        name=second
    }
}
# Field with custom key
custom-key-field="custom value"
# Field backed by environment variable
variableField=default
# Null value test
"nullValue"=null
# Empty collection
emptyList=[]
# Empty map
emptyMap {}
# Field with repeating comments
# This tests multiple @Comment annotations
# on the same field
repeatingCommentField="test value"
