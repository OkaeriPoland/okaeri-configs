name: Publish PR Build

on:
  pull_request_target:
    types: [labeled]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to publish'
        required: true
        type: number

jobs:
  publish:
    name: Publish PR Build to GitHub Packages
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event.label.name == 'bug' ||
      github.event.label.name == 'enhancement'

    steps:
      - name: Determine PR number
        id: pr
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Get PR details
        id: pr_details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.pr.outputs.number }}
            });
            core.setOutput('ref', pr.data.head.sha);
            core.setOutput('head_ref', pr.data.head.ref);
            return pr.data;

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_details.outputs.ref }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Extract base version
        id: version
        run: |
          BASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          NEW_VERSION="${BASE_VERSION}-pr${{ steps.pr.outputs.number }}-${SHORT_SHA}-SNAPSHOT"
          echo "base=${BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "new=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Publishing version: ${NEW_VERSION}"

      - name: Update version in all modules
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.new }} -DgenerateBackupPoms=false -B

      - name: Build and publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          mvn deploy -DskipTests -B \
            -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${{ github.repository }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.new }}';
            const prNumber = ${{ steps.pr.outputs.number }};

            const comment = `## üì¶ PR Build Published

            Version \`${version}\` has been published to GitHub Packages.

            ### Prerequisites

            **‚ö†Ô∏è Ensure you have GitHub authentication configured:**

            GitHub Packages requires authentication even for public repositories. You need to:

            1. **Create a Personal Access Token** (if you don't have one):
               - Go to [GitHub Settings ‚Üí Developer settings ‚Üí Personal access tokens ‚Üí Tokens (classic)](https://github.com/settings/tokens)
               - Click "Generate new token (classic)"
               - Select scope: \`read:packages\`
               - Generate and copy the token

            2. **Configure Maven authentication** in \`~/.m2/settings.xml\`:
               \`\`\`xml
               <settings>
                   <servers>
                       <server>
                           <id>github</id>
                           <username>YOUR_GITHUB_USERNAME</username>
                           <password>YOUR_GITHUB_TOKEN</password>
                       </server>
                   </servers>
               </settings>
               \`\`\`

            ### Usage

            **1. Add GitHub Packages repository to your \`pom.xml\`:**
            \`\`\`xml
            <repositories>
                <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/OkaeriPoland/okaeri-configs</url>
                </repository>
            </repositories>
            \`\`\`

            **2. Use the PR version:**
            \`\`\`xml
            <dependency>
                <groupId>eu.okaeri</groupId>
                <artifactId>okaeri-configs-yaml-snakeyaml</artifactId>
                <version>${version}</version>
            </dependency>
            \`\`\`

            **Note:** Replace \`okaeri-configs-yaml-snakeyaml\` with the module you need. All modules have been published with this version.

            ---

            *This build was triggered by adding the \`${context.payload.label?.name || 'manual trigger'}\` label.*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
