# ===========================================
#   Okaeri Configs - Mega Test Config
#   Tests ALL features comprehensively
# ===========================================
# Boolean primitive and wrapper
primBool: true
wrapBool: false
# Numeric primitives
primByte: 127
primShort: 32000
primInt: 2147483647
primLong: 9223372036854775807
primFloat: 3.14159
primDouble: 2.718281828
primChar: Œ©
# Wrapper types
wrapByte: 100
wrapShort: 30000
wrapInt: 123456
wrapLong: 987654321
wrapFloat: 1.414
wrapDouble: 1.732
wrapChar: ‚Ç¨
# String tests
# including unicode and special chars
simpleString: Hello, World!
unicodeJapanese: „Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå üåç
unicodeRussian: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä! –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
unicodePolish: Czƒô≈õƒá ≈õwiecie! ≈Å√≥d≈∫, Gda≈Ñsk, Krak√≥w, ≈∫d≈∫b≈Ço
specialChars: '!@#$%^&*()_+-=[]{}|;'':"<>?,./'
emptyString: ''
# Math types for precision
bigInt: '999999999999999999999999999999'
bigDec: '123.456789012345678901234567890'
# List of strings
stringList:
- alpha
- beta
- gamma
# List of integers
intList:
- 1
- 2
- 3
- 5
- 8
- 13
# Set of strings (order preserved)
stringSet:
- one
- two
- three
# Set of enums
enumSet:
- FIRST
- SECOND
# Simple string-to-string map
simpleMap:
  key1: value1
  key2: value2
# Map with integer keys
intKeyMap:
  1: one
  2: two
# Nested map
nestedMap:
  group1:
    a: 1
    b: 2
# Map with enum keys
enumKeyMap:
  FIRST: first value
  SECOND: second value
# Simple enum
singleEnum: THIRD
# List of enums
enumList:
- FIRST
- THIRD
# Nested subconfig
subConfig:
  # Subconfig field
  subField: default sub
  subNumber: 42
# List of nested configs
subConfigList:
- subField: sub1
  subNumber: 10
- subField: sub2
  subNumber: 20
# Serializable custom object
customObj:
  name: test
  id: 999
# Field with custom key
custom-key-field: custom value
# Field backed by environment variable
variableField: default
# Null value test
nullValue: null
# Empty collection
emptyList: []
# Empty map
emptyMap: {}
