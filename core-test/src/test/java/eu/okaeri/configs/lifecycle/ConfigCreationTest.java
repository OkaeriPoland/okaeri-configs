package eu.okaeri.configs.lifecycle;

import eu.okaeri.configs.ConfigManager;
import eu.okaeri.configs.OkaeriConfig;
import eu.okaeri.configs.test.configs.PrimitivesTestConfig;
import eu.okaeri.configs.yaml.snakeyaml.YamlSnakeYamlConfigurer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.nio.file.Path;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

/**
 * Tests for config creation functionality.
 * Covers ConfigManager.create() methods and initialization.
 */
class ConfigCreationTest {

    @TempDir
    Path tempDir;

    @Test
    void testCreate_WithClass_CreatesInstance() {
        // When: Creating config using class
        PrimitivesTestConfig config = ConfigManager.create(PrimitivesTestConfig.class);

        // Then: Config should be created with default values
        assertThat(config).isNotNull();
        assertThat(config.isBoolValue()).isTrue();
        assertThat(config.getIntValue()).isEqualTo(42);
    }

    @Test
    void testCreate_WithInitializer_AppliesInitialization() throws Exception {
        // Given: A configurer
        YamlSnakeYamlConfigurer configurer = new YamlSnakeYamlConfigurer();

        // When: Creating config with initializer (for OkaeriConfig API methods)
        PrimitivesTestConfig config = ConfigManager.create(PrimitivesTestConfig.class, cfg -> {
            cfg.withConfigurer(configurer);
        });

        // Then: Initializer should be applied
        assertThat(config).isNotNull();
        assertThat(config.getConfigurer()).isSameAs(configurer);
    }

    @Test
    void testCreate_WithBindFile_SetsBindFile() throws Exception {
        // Given: A temporary file
        File testFile = this.tempDir.resolve("test.yml").toFile();

        // When: Creating config with initializer to set bind file
        PrimitivesTestConfig config = ConfigManager.create(PrimitivesTestConfig.class, cfg -> {
            cfg.withConfigurer(new YamlSnakeYamlConfigurer());
            cfg.withBindFile(testFile);
        });

        // Then: Bind file should be set
        assertThat(config.getBindFile()).isEqualTo(testFile.toPath());
    }

    @Test
    void testCreate_DeclarationAutoGenerated() {
        // When: Creating config
        PrimitivesTestConfig config = ConfigManager.create(PrimitivesTestConfig.class);

        // Then: Declaration should be auto-generated in constructor
        assertThat(config.getDeclaration()).isNotNull();
        assertThat(config.getDeclaration().getFields()).isNotEmpty();
        assertThat(config.getDeclaration().getFields()).hasSize(16); // 8 primitives + 8 wrappers
    }

    @Test
    void testCreate_FluentApiChaining() {
        // Given: A configurer
        YamlSnakeYamlConfigurer configurer = new YamlSnakeYamlConfigurer();

        // When: Using fluent API
        OkaeriConfig config = ConfigManager.create(PrimitivesTestConfig.class)
            .withConfigurer(configurer);

        // Then: Fluent API should work
        assertThat(config).isNotNull();
        assertThat(config.getConfigurer()).isSameAs(configurer);
        assertThat(config).isInstanceOf(PrimitivesTestConfig.class);
    }

    @Test
    void testCreate_WithNullClass_ThrowsException() {
        // When/Then: Creating config with null class should throw
        assertThatThrownBy(() -> ConfigManager.create(null))
            .isInstanceOf(NullPointerException.class);
    }

    @Test
    void testCreate_WithNullInitializer_ThrowsException() {
        // When/Then: Creating config with null initializer should throw
        assertThatThrownBy(() -> ConfigManager.create(PrimitivesTestConfig.class, null))
            .isInstanceOf(NullPointerException.class);
    }
}
